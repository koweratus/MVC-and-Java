//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Zadatak.Models.Database
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class PPPKEntities5 : DbContext
    {
        public PPPKEntities5()
            : base("name=PPPKEntities5")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<KategorijaServi> KategorijaServis { get; set; }
        public virtual DbSet<Servi> Servis { get; set; }
        public virtual DbSet<Vozila> Vozilas { get; set; }
    
        public virtual ObjectResult<Servi> AddServis(Nullable<int> iDServis, Nullable<int> voziloID, Nullable<double> cijena, string opis, Nullable<System.DateTime> datum, Nullable<int> kategorijaServisID)
        {
            var iDServisParameter = iDServis.HasValue ?
                new ObjectParameter("IDServis", iDServis) :
                new ObjectParameter("IDServis", typeof(int));
    
            var voziloIDParameter = voziloID.HasValue ?
                new ObjectParameter("VoziloID", voziloID) :
                new ObjectParameter("VoziloID", typeof(int));
    
            var cijenaParameter = cijena.HasValue ?
                new ObjectParameter("Cijena", cijena) :
                new ObjectParameter("Cijena", typeof(double));
    
            var opisParameter = opis != null ?
                new ObjectParameter("Opis", opis) :
                new ObjectParameter("Opis", typeof(string));
    
            var datumParameter = datum.HasValue ?
                new ObjectParameter("Datum", datum) :
                new ObjectParameter("Datum", typeof(System.DateTime));
    
            var kategorijaServisIDParameter = kategorijaServisID.HasValue ?
                new ObjectParameter("KategorijaServisID", kategorijaServisID) :
                new ObjectParameter("KategorijaServisID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Servi>("AddServis", iDServisParameter, voziloIDParameter, cijenaParameter, opisParameter, datumParameter, kategorijaServisIDParameter);
        }
    
        public virtual ObjectResult<Servi> AddServis(Nullable<int> iDServis, Nullable<int> voziloID, Nullable<double> cijena, string opis, Nullable<System.DateTime> datum, Nullable<int> kategorijaServisID, MergeOption mergeOption)
        {
            var iDServisParameter = iDServis.HasValue ?
                new ObjectParameter("IDServis", iDServis) :
                new ObjectParameter("IDServis", typeof(int));
    
            var voziloIDParameter = voziloID.HasValue ?
                new ObjectParameter("VoziloID", voziloID) :
                new ObjectParameter("VoziloID", typeof(int));
    
            var cijenaParameter = cijena.HasValue ?
                new ObjectParameter("Cijena", cijena) :
                new ObjectParameter("Cijena", typeof(double));
    
            var opisParameter = opis != null ?
                new ObjectParameter("Opis", opis) :
                new ObjectParameter("Opis", typeof(string));
    
            var datumParameter = datum.HasValue ?
                new ObjectParameter("Datum", datum) :
                new ObjectParameter("Datum", typeof(System.DateTime));
    
            var kategorijaServisIDParameter = kategorijaServisID.HasValue ?
                new ObjectParameter("KategorijaServisID", kategorijaServisID) :
                new ObjectParameter("KategorijaServisID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Servi>("AddServis", mergeOption, iDServisParameter, voziloIDParameter, cijenaParameter, opisParameter, datumParameter, kategorijaServisIDParameter);
        }
    
        public virtual ObjectResult<Servi> DeleteServis(Nullable<int> iDServis)
        {
            var iDServisParameter = iDServis.HasValue ?
                new ObjectParameter("IDServis", iDServis) :
                new ObjectParameter("IDServis", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Servi>("DeleteServis", iDServisParameter);
        }
    
        public virtual ObjectResult<Servi> DeleteServis(Nullable<int> iDServis, MergeOption mergeOption)
        {
            var iDServisParameter = iDServis.HasValue ?
                new ObjectParameter("IDServis", iDServis) :
                new ObjectParameter("IDServis", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Servi>("DeleteServis", mergeOption, iDServisParameter);
        }
    
        public virtual ObjectResult<KategorijaServi> GetKategorijeTroskova()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<KategorijaServi>("GetKategorijeTroskova");
        }
    
        public virtual ObjectResult<KategorijaServi> GetKategorijeTroskova(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<KategorijaServi>("GetKategorijeTroskova", mergeOption);
        }
    
        public virtual ObjectResult<Servi> GetServis(Nullable<int> iDServis)
        {
            var iDServisParameter = iDServis.HasValue ?
                new ObjectParameter("IDServis", iDServis) :
                new ObjectParameter("IDServis", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Servi>("GetServis", iDServisParameter);
        }
    
        public virtual ObjectResult<Servi> GetServis(Nullable<int> iDServis, MergeOption mergeOption)
        {
            var iDServisParameter = iDServis.HasValue ?
                new ObjectParameter("IDServis", iDServis) :
                new ObjectParameter("IDServis", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Servi>("GetServis", mergeOption, iDServisParameter);
        }
    
        public virtual ObjectResult<Servi> GetServisi()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Servi>("GetServisi");
        }
    
        public virtual ObjectResult<Servi> GetServisi(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Servi>("GetServisi", mergeOption);
        }
    
        public virtual ObjectResult<Vozila> GetVozila()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Vozila>("GetVozila");
        }
    
        public virtual ObjectResult<Vozila> GetVozila(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Vozila>("GetVozila", mergeOption);
        }
    
        public virtual ObjectResult<Servi> UpdateServis(Nullable<int> iDServis, Nullable<int> voziloID, Nullable<double> cijena, string opis, Nullable<System.DateTime> datum, Nullable<int> kategorijaServisID)
        {
            var iDServisParameter = iDServis.HasValue ?
                new ObjectParameter("IDServis", iDServis) :
                new ObjectParameter("IDServis", typeof(int));
    
            var voziloIDParameter = voziloID.HasValue ?
                new ObjectParameter("VoziloID", voziloID) :
                new ObjectParameter("VoziloID", typeof(int));
    
            var cijenaParameter = cijena.HasValue ?
                new ObjectParameter("Cijena", cijena) :
                new ObjectParameter("Cijena", typeof(double));
    
            var opisParameter = opis != null ?
                new ObjectParameter("Opis", opis) :
                new ObjectParameter("Opis", typeof(string));
    
            var datumParameter = datum.HasValue ?
                new ObjectParameter("Datum", datum) :
                new ObjectParameter("Datum", typeof(System.DateTime));
    
            var kategorijaServisIDParameter = kategorijaServisID.HasValue ?
                new ObjectParameter("KategorijaServisID", kategorijaServisID) :
                new ObjectParameter("KategorijaServisID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Servi>("UpdateServis", iDServisParameter, voziloIDParameter, cijenaParameter, opisParameter, datumParameter, kategorijaServisIDParameter);
        }
    
        public virtual ObjectResult<Servi> UpdateServis(Nullable<int> iDServis, Nullable<int> voziloID, Nullable<double> cijena, string opis, Nullable<System.DateTime> datum, Nullable<int> kategorijaServisID, MergeOption mergeOption)
        {
            var iDServisParameter = iDServis.HasValue ?
                new ObjectParameter("IDServis", iDServis) :
                new ObjectParameter("IDServis", typeof(int));
    
            var voziloIDParameter = voziloID.HasValue ?
                new ObjectParameter("VoziloID", voziloID) :
                new ObjectParameter("VoziloID", typeof(int));
    
            var cijenaParameter = cijena.HasValue ?
                new ObjectParameter("Cijena", cijena) :
                new ObjectParameter("Cijena", typeof(double));
    
            var opisParameter = opis != null ?
                new ObjectParameter("Opis", opis) :
                new ObjectParameter("Opis", typeof(string));
    
            var datumParameter = datum.HasValue ?
                new ObjectParameter("Datum", datum) :
                new ObjectParameter("Datum", typeof(System.DateTime));
    
            var kategorijaServisIDParameter = kategorijaServisID.HasValue ?
                new ObjectParameter("KategorijaServisID", kategorijaServisID) :
                new ObjectParameter("KategorijaServisID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Servi>("UpdateServis", mergeOption, iDServisParameter, voziloIDParameter, cijenaParameter, opisParameter, datumParameter, kategorijaServisIDParameter);
        }
    
        public virtual ObjectResult<Vozila> AddVozilo(Nullable<int> iDVozilo, string tip, string marka, Nullable<int> godinaProizvodnje, Nullable<int> stanjeKilometra)
        {
            var iDVoziloParameter = iDVozilo.HasValue ?
                new ObjectParameter("IDVozilo", iDVozilo) :
                new ObjectParameter("IDVozilo", typeof(int));
    
            var tipParameter = tip != null ?
                new ObjectParameter("Tip", tip) :
                new ObjectParameter("Tip", typeof(string));
    
            var markaParameter = marka != null ?
                new ObjectParameter("Marka", marka) :
                new ObjectParameter("Marka", typeof(string));
    
            var godinaProizvodnjeParameter = godinaProizvodnje.HasValue ?
                new ObjectParameter("GodinaProizvodnje", godinaProizvodnje) :
                new ObjectParameter("GodinaProizvodnje", typeof(int));
    
            var stanjeKilometraParameter = stanjeKilometra.HasValue ?
                new ObjectParameter("StanjeKilometra", stanjeKilometra) :
                new ObjectParameter("StanjeKilometra", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Vozila>("AddVozilo", iDVoziloParameter, tipParameter, markaParameter, godinaProizvodnjeParameter, stanjeKilometraParameter);
        }
    
        public virtual ObjectResult<Vozila> AddVozilo(Nullable<int> iDVozilo, string tip, string marka, Nullable<int> godinaProizvodnje, Nullable<int> stanjeKilometra, MergeOption mergeOption)
        {
            var iDVoziloParameter = iDVozilo.HasValue ?
                new ObjectParameter("IDVozilo", iDVozilo) :
                new ObjectParameter("IDVozilo", typeof(int));
    
            var tipParameter = tip != null ?
                new ObjectParameter("Tip", tip) :
                new ObjectParameter("Tip", typeof(string));
    
            var markaParameter = marka != null ?
                new ObjectParameter("Marka", marka) :
                new ObjectParameter("Marka", typeof(string));
    
            var godinaProizvodnjeParameter = godinaProizvodnje.HasValue ?
                new ObjectParameter("GodinaProizvodnje", godinaProizvodnje) :
                new ObjectParameter("GodinaProizvodnje", typeof(int));
    
            var stanjeKilometraParameter = stanjeKilometra.HasValue ?
                new ObjectParameter("StanjeKilometra", stanjeKilometra) :
                new ObjectParameter("StanjeKilometra", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Vozila>("AddVozilo", mergeOption, iDVoziloParameter, tipParameter, markaParameter, godinaProizvodnjeParameter, stanjeKilometraParameter);
        }
    
        public virtual ObjectResult<Vozila> DeleteVozilo(Nullable<int> iDVozilo)
        {
            var iDVoziloParameter = iDVozilo.HasValue ?
                new ObjectParameter("IDVozilo", iDVozilo) :
                new ObjectParameter("IDVozilo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Vozila>("DeleteVozilo", iDVoziloParameter);
        }
    
        public virtual ObjectResult<Vozila> DeleteVozilo(Nullable<int> iDVozilo, MergeOption mergeOption)
        {
            var iDVoziloParameter = iDVozilo.HasValue ?
                new ObjectParameter("IDVozilo", iDVozilo) :
                new ObjectParameter("IDVozilo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Vozila>("DeleteVozilo", mergeOption, iDVoziloParameter);
        }
    
        public virtual ObjectResult<Vozila> GetVozilo(Nullable<int> iDVozilo)
        {
            var iDVoziloParameter = iDVozilo.HasValue ?
                new ObjectParameter("IDVozilo", iDVozilo) :
                new ObjectParameter("IDVozilo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Vozila>("GetVozilo", iDVoziloParameter);
        }
    
        public virtual ObjectResult<Vozila> GetVozilo(Nullable<int> iDVozilo, MergeOption mergeOption)
        {
            var iDVoziloParameter = iDVozilo.HasValue ?
                new ObjectParameter("IDVozilo", iDVozilo) :
                new ObjectParameter("IDVozilo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Vozila>("GetVozilo", mergeOption, iDVoziloParameter);
        }
    
        public virtual ObjectResult<Vozila> UpdateVozilo(Nullable<int> iDVozilo, string tip, string marka, Nullable<int> godinaProizvodnje, Nullable<int> stanjeKilometra)
        {
            var iDVoziloParameter = iDVozilo.HasValue ?
                new ObjectParameter("IDVozilo", iDVozilo) :
                new ObjectParameter("IDVozilo", typeof(int));
    
            var tipParameter = tip != null ?
                new ObjectParameter("Tip", tip) :
                new ObjectParameter("Tip", typeof(string));
    
            var markaParameter = marka != null ?
                new ObjectParameter("Marka", marka) :
                new ObjectParameter("Marka", typeof(string));
    
            var godinaProizvodnjeParameter = godinaProizvodnje.HasValue ?
                new ObjectParameter("GodinaProizvodnje", godinaProizvodnje) :
                new ObjectParameter("GodinaProizvodnje", typeof(int));
    
            var stanjeKilometraParameter = stanjeKilometra.HasValue ?
                new ObjectParameter("StanjeKilometra", stanjeKilometra) :
                new ObjectParameter("StanjeKilometra", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Vozila>("UpdateVozilo", iDVoziloParameter, tipParameter, markaParameter, godinaProizvodnjeParameter, stanjeKilometraParameter);
        }
    
        public virtual ObjectResult<Vozila> UpdateVozilo(Nullable<int> iDVozilo, string tip, string marka, Nullable<int> godinaProizvodnje, Nullable<int> stanjeKilometra, MergeOption mergeOption)
        {
            var iDVoziloParameter = iDVozilo.HasValue ?
                new ObjectParameter("IDVozilo", iDVozilo) :
                new ObjectParameter("IDVozilo", typeof(int));
    
            var tipParameter = tip != null ?
                new ObjectParameter("Tip", tip) :
                new ObjectParameter("Tip", typeof(string));
    
            var markaParameter = marka != null ?
                new ObjectParameter("Marka", marka) :
                new ObjectParameter("Marka", typeof(string));
    
            var godinaProizvodnjeParameter = godinaProizvodnje.HasValue ?
                new ObjectParameter("GodinaProizvodnje", godinaProizvodnje) :
                new ObjectParameter("GodinaProizvodnje", typeof(int));
    
            var stanjeKilometraParameter = stanjeKilometra.HasValue ?
                new ObjectParameter("StanjeKilometra", stanjeKilometra) :
                new ObjectParameter("StanjeKilometra", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Vozila>("UpdateVozilo", mergeOption, iDVoziloParameter, tipParameter, markaParameter, godinaProizvodnjeParameter, stanjeKilometraParameter);
        }
    }
}
